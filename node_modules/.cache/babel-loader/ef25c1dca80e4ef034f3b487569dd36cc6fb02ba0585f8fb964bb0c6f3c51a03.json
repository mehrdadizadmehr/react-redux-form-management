{"ast":null,"code":"var _s = $RefreshSig$();\n// Import the useState hook from React to manage the form state.\nimport { useState } from 'react';\n\n// Import the yup library for validation.\n\n// Define a type for the form state.\n\n// Define an interface for the useForm hook props.\n\n// Define the useForm hook.\nexport const useForm = ({\n  initialValues,\n  validationSchema\n}) => {\n  _s();\n  // Use the useState hook to manage the form state.\n  const [values, setValues] = useState(initialValues);\n\n  // Use the useState hook to manage the form errors.\n  const [errors, setErrors] = useState({});\n\n  // Use the useState hook to manage the form submission state.\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // Define a function to handle changes to the form fields.\n  const handleChange = (name, value) => {\n    // Update the form state with the new value.\n    setValues(prevValues => ({\n      ...prevValues,\n      [name]: value\n    }));\n\n    // If validation is enabled, validate the field.\n    if (validationSchema) {\n      validateField(name, value);\n    }\n  };\n\n  // Define a function to validate a form field.\n  const validateField = async (name, value) => {\n    try {\n      // If validation is enabled, validate the field against the validation schema.\n      if (validationSchema) {\n        await validationSchema.validateAt(name, values);\n\n        // If the field is valid, clear the error message.\n        setErrors(prevErrors => ({\n          ...prevErrors,\n          [name]: ''\n        }));\n      }\n    } catch (error) {\n      // If validation is enabled, set the error message for the field.\n      if (validationSchema) {\n        setErrors(prevErrors => ({\n          ...prevErrors,\n          [name]: error.errors[0]\n        }));\n      }\n    }\n  };\n\n  // Define a function to handle the form submission.\n  const handleSubmit = async event => {\n    // If an event is passed, prevent the default form submission behavior.\n    if (event) {\n      event.preventDefault();\n    }\n\n    // If validation is enabled, validate all of the form fields.\n    if (validationSchema) {\n      const validationErrors = {};\n      for (const key in values) {\n        try {\n          // Validate the field against the validation schema.\n          await validationSchema.validateAt(key, values);\n        } catch (error) {\n          // Add the field error to the validation errors object.\n          validationErrors[key] = error.errors[0];\n        }\n      }\n\n      // If there are any validation errors, display them to the user.\n      if (Object.keys(validationErrors).length > 0) {\n        setErrors(validationErrors);\n        return;\n      }\n    }\n\n    // Set the form submission state to true.\n    setIsSubmitting(true);\n\n    // Submit the form data.\n    // ...\n\n    // Set the form submission state to false.\n    setIsSubmitting(false);\n  };\n\n  // Return the form state and event handlers.\n  return {\n    values,\n    errors,\n    isSubmitting,\n    handleChange,\n    handleSubmit\n  };\n};\n_s(useForm, \"Xxj6gURHghnx0bvPFxLxiiW/oEM=\");","map":{"version":3,"names":["useState","useForm","initialValues","validationSchema","_s","values","setValues","errors","setErrors","isSubmitting","setIsSubmitting","handleChange","name","value","prevValues","validateField","validateAt","prevErrors","error","handleSubmit","event","preventDefault","validationErrors","key","Object","keys","length"],"sources":["C:/Users/m.izadmehr.UTEL/Desktop/apply task/snapptrip/react-redux-form-management/src/hooks/useForm.ts"],"sourcesContent":["// Import the useState hook from React to manage the form state.\r\nimport { useState } from 'react';\r\n\r\n// Import the yup library for validation.\r\nimport * as yup from 'yup';\r\n\r\n// Define a type for the form state.\r\ntype AnyObject = Record<string, any>;\r\n\r\n// Define an interface for the useForm hook props.\r\ninterface UseFormProps<T extends AnyObject> {\r\n  // The initial values of the form state.\r\n  initialValues: T;\r\n\r\n  // The validation schema for the form.\r\n  validationSchema?: yup.ObjectSchema<T>;\r\n}\r\n\r\n// Define the useForm hook.\r\nexport const useForm = <T extends AnyObject>({ initialValues, validationSchema }: UseFormProps<T>) => {\r\n  // Use the useState hook to manage the form state.\r\n  const [values, setValues] = useState<T>(initialValues);\r\n\r\n  // Use the useState hook to manage the form errors.\r\n  const [errors, setErrors] = useState<AnyObject>({});\r\n\r\n  // Use the useState hook to manage the form submission state.\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  // Define a function to handle changes to the form fields.\r\n  const handleChange = (name: string, value: any) => {\r\n    // Update the form state with the new value.\r\n    setValues((prevValues) => ({ ...prevValues, [name]: value }));\r\n\r\n    // If validation is enabled, validate the field.\r\n    if (validationSchema) {\r\n      validateField(name, value);\r\n    }\r\n  };\r\n\r\n  // Define a function to validate a form field.\r\n  const validateField = async (name: string, value: any) => {\r\n    try {\r\n      // If validation is enabled, validate the field against the validation schema.\r\n      if (validationSchema) {\r\n        await validationSchema.validateAt(name, values);\r\n\r\n        // If the field is valid, clear the error message.\r\n        setErrors((prevErrors) => ({ ...prevErrors, [name]: '' }));\r\n      }\r\n    } catch (error) {\r\n      // If validation is enabled, set the error message for the field.\r\n      if (validationSchema) {\r\n        setErrors((prevErrors) => ({\r\n          ...prevErrors,\r\n          [name]: (error as yup.ValidationError).errors[0] as string,\r\n        }));\r\n      }\r\n    }\r\n  };\r\n\r\n  // Define a function to handle the form submission.\r\n  const handleSubmit = async (event?: React.FormEvent) => {\r\n    // If an event is passed, prevent the default form submission behavior.\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    // If validation is enabled, validate all of the form fields.\r\n    if (validationSchema) {\r\n      const validationErrors: AnyObject = {};\r\n\r\n      for (const key in values) {\r\n        try {\r\n          // Validate the field against the validation schema.\r\n          await validationSchema.validateAt(key, values);\r\n        } catch (error) {\r\n          // Add the field error to the validation errors object.\r\n          validationErrors[key] = (error as yup.ValidationError).errors[0];\r\n        }\r\n      }\r\n\r\n      // If there are any validation errors, display them to the user.\r\n      if (Object.keys(validationErrors).length > 0) {\r\n        setErrors(validationErrors);\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Set the form submission state to true.\r\n    setIsSubmitting(true);\r\n\r\n    // Submit the form data.\r\n    // ...\r\n\r\n    // Set the form submission state to false.\r\n    setIsSubmitting(false);\r\n  };\r\n\r\n  // Return the form state and event handlers.\r\n  return {\r\n    values,\r\n    errors,\r\n    isSubmitting,\r\n    handleChange,\r\n    handleSubmit,\r\n  };\r\n};\r\n"],"mappings":";AAAA;AACA,SAASA,QAAQ,QAAQ,OAAO;;AAEhC;;AAGA;;AAGA;;AASA;AACA,OAAO,MAAMC,OAAO,GAAGA,CAAsB;EAAEC,aAAa;EAAEC;AAAkC,CAAC,KAAK;EAAAC,EAAA;EACpG;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAIE,aAAa,CAAC;;EAEtD;EACA,MAAM,CAACK,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAY,CAAC,CAAC,CAAC;;EAEnD;EACA,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;;EAEvD;EACA,MAAMW,YAAY,GAAGA,CAACC,IAAY,EAAEC,KAAU,KAAK;IACjD;IACAP,SAAS,CAAEQ,UAAU,KAAM;MAAE,GAAGA,UAAU;MAAE,CAACF,IAAI,GAAGC;IAAM,CAAC,CAAC,CAAC;;IAE7D;IACA,IAAIV,gBAAgB,EAAE;MACpBY,aAAa,CAACH,IAAI,EAAEC,KAAK,CAAC;IAC5B;EACF,CAAC;;EAED;EACA,MAAME,aAAa,GAAG,MAAAA,CAAOH,IAAY,EAAEC,KAAU,KAAK;IACxD,IAAI;MACF;MACA,IAAIV,gBAAgB,EAAE;QACpB,MAAMA,gBAAgB,CAACa,UAAU,CAACJ,IAAI,EAAEP,MAAM,CAAC;;QAE/C;QACAG,SAAS,CAAES,UAAU,KAAM;UAAE,GAAGA,UAAU;UAAE,CAACL,IAAI,GAAG;QAAG,CAAC,CAAC,CAAC;MAC5D;IACF,CAAC,CAAC,OAAOM,KAAK,EAAE;MACd;MACA,IAAIf,gBAAgB,EAAE;QACpBK,SAAS,CAAES,UAAU,KAAM;UACzB,GAAGA,UAAU;UACb,CAACL,IAAI,GAAIM,KAAK,CAAyBX,MAAM,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;MACL;IACF;EACF,CAAC;;EAED;EACA,MAAMY,YAAY,GAAG,MAAOC,KAAuB,IAAK;IACtD;IACA,IAAIA,KAAK,EAAE;MACTA,KAAK,CAACC,cAAc,CAAC,CAAC;IACxB;;IAEA;IACA,IAAIlB,gBAAgB,EAAE;MACpB,MAAMmB,gBAA2B,GAAG,CAAC,CAAC;MAEtC,KAAK,MAAMC,GAAG,IAAIlB,MAAM,EAAE;QACxB,IAAI;UACF;UACA,MAAMF,gBAAgB,CAACa,UAAU,CAACO,GAAG,EAAElB,MAAM,CAAC;QAChD,CAAC,CAAC,OAAOa,KAAK,EAAE;UACd;UACAI,gBAAgB,CAACC,GAAG,CAAC,GAAIL,KAAK,CAAyBX,MAAM,CAAC,CAAC,CAAC;QAClE;MACF;;MAEA;MACA,IAAIiB,MAAM,CAACC,IAAI,CAACH,gBAAgB,CAAC,CAACI,MAAM,GAAG,CAAC,EAAE;QAC5ClB,SAAS,CAACc,gBAAgB,CAAC;QAC3B;MACF;IACF;;IAEA;IACAZ,eAAe,CAAC,IAAI,CAAC;;IAErB;IACA;;IAEA;IACAA,eAAe,CAAC,KAAK,CAAC;EACxB,CAAC;;EAED;EACA,OAAO;IACLL,MAAM;IACNE,MAAM;IACNE,YAAY;IACZE,YAAY;IACZQ;EACF,CAAC;AACH,CAAC;AAACf,EAAA,CAxFWH,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}